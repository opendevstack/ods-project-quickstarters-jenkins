/* generated jenkins file used for building and deploying @component_id@ in projects @project_id@ */
def final projectId = '@project_id@'
def final componentId = '@component_id@'
def final credentialsId = "${projectId}-cd-cd-user-with-password"
def dockerRegistry
node {
  dockerRegistry = env.DOCKER_REGISTRY
}

@Library('ods-jenkins-shared-library@@ods_git_ref@') _

// See https://www.opendevstack.org/ods-documentation/ods-jenkins-shared-library/latest/index.html for usage and customizations
odsPipeline(
  image: "${dockerRegistry}/cd/jenkins-slave-golang:@ods_image_tag@",
  projectId: projectId,
  componentId: componentId,
  branchToEnvironmentMapping: [
    'master': 'dev',
    // 'release/*': 'test'
  ]
) { context ->
  stageCheckFormat(context)
  stageLint(context)
  stageScanForSonarqube(context)
  stageUnitTest(context)
  stageBuild(context)
  stageStartOpenshiftBuild(context)
  stageDeployToOpenshift(context)
}

def stageCheckFormat(def context) {
  stage('Check Format') {
    def unformatted = sh(script: 'gofmt -l .', returnStdout: true)
    if (unformatted) {
      println "Unformatted files:\n${unformatted}"
      error 'All files need to be gofmt\'d. Please run: gofmt -w .'
    }
  }
}

def stageLint(def context) {
  stage('Lint') {
    withEnv(["CGO_ENABLED=0", "GOCACHE=${WORKSPACE}/.cache"]) {
      sh "golangci-lint run"
    }
  }
}

def stageBuild(def context) {
  stage('Build') {
    def binary = "app_linux_amd64"
    withEnv(["CGO_ENABLED=0", "GOCACHE=${WORKSPACE}/.cache"]) {
      sh "go build -o docker/${binary}"
    }
  }
}

def stageUnitTest(def context) {
  stage('Unit Test') {
    withEnv(["CGO_ENABLED=0", "GOCACHE=${WORKSPACE}/.cache"]) {
      sh 'mkdir -p build/test-results/test'
      def gopkgs = sh(script: 'go list ./... | grep -v /vendor', returnStdout: true).trim()
      withEnv(["GOPKGS=${gopkgs}"]) {
        def status = sh(script: 'go test -v -cover $GOPKGS 2>&1 > test-results.txt', returnStatus: true)
        sh 'cat test-results.txt | go-junit-report > build/test-results/test/report.xml'
        if (status != 0) {
          error "go test -v -cover $GOPKGS failed!"
        }
      }
    }
  }
}

