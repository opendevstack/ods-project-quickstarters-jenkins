def odsNamespace = ''
def odsGitRef = ''
def odsImageTag = ''
def sharedLibraryRef = ''
def agentImageTag = ''

node {
  odsNamespace = env.ODS_NAMESPACE ?: 'ods'
  odsGitRef = env.ODS_GIT_REF ?: 'master'
  odsImageTag = env.ODS_IMAGE_TAG ?: 'latest'
  sharedLibraryRef = env.SHARED_LIBRARY_REF ?: odsImageTag
  agentImageTag = env.AGENT_IMAGE_TAG ?: odsImageTag
}

library("ods-jenkins-shared-library@${sharedLibraryRef}")

odsQuickstarterPipeline(
  imageStreamTag: "${odsNamespace}/jenkins-agent-maven:${agentImageTag}",
) { context ->

  stage('Build spring project') {
    dir(context.targetDir) {
      def springBootVersion = '2.3.1.RELEASE'
      echo "--- create spring boot (v${springBootVersion}) project via spring initializr ---"

      sh "curl https://start.spring.io/starter.tgz \
            -d type=gradle-project \
            -d language=java \
            -d dependencies='web,data-rest,restdocs,data-jpa,h2,security,devtools' \
            -d bootVersion=${springBootVersion} \
            -d packaging=jar \
            -d javaVersion=11 \
            -d groupId=${context.projectId} \
            -d artifactId=${context.componentId} \
            -d name=${context.componentId} \
            -d description='OpenDevStack%20Demo%20Project%20for%20Spring%20Boot' \
            -d packageName='${context.packageName}' \
            | tar -zxvf - "

      echo "--- configure application.properties ---"

      sh "echo 'spring.profiles.active: dev' > src/main/resources/application.properties"
      sh "echo 'spring.jpa.database: HSQL' > src/main/resources/application-dev.properties"
    }

    echo "--- customise build.gradle ---"

    // add nexus credential settings
    sh "cat ${context.sourceDir}/templates/gradle-buildscript.template ${context.targetDir}/build.gradle >out && mv out ${context.targetDir}/build.gradle"

    // insert required plugins
    sh "sed -i -e '/plugins {/{r ${context.sourceDir}/templates/gradle-plugins.template' -e 'd' -e '}' ${context.targetDir}/build.gradle"

    // insert nexus repos
    sh "sed -i -e '/mavenCentral()/{r ${context.sourceDir}/templates/gradle-repositories.template' -e 'd' -e '}' ${context.targetDir}/build.gradle"

    // insert test settings
    sh "sed -i -e '/test {/{r ${context.sourceDir}/templates/gradle-plugin-test.template' -e 'd' -e '}' ${context.targetDir}/build.gradle"

    // append bootJar settings
    sh "cat ${context.sourceDir}/templates/gradle-plugin-bootjar.template >> ${context.targetDir}/build.gradle"

    // append jacoco settings
    sh "cat ${context.sourceDir}/templates/gradle-plugin-jacoco.template >> ${context.targetDir}/build.gradle"

    // append maven-publish settings
    sh "cat ${context.sourceDir}/templates/gradle-maven-publish.template >> ${context.targetDir}/build.gradle"
  }

  odsQuickstarterStageCopyFiles(context)

  odsQuickstarterStageCreateOpenShiftResources(
    context,
    [directory: 'common/ocp-config/component-environment']
  )

  odsQuickstarterStageRenderJenkinsfile(context)

  odsQuickstarterStageRenderSonarProperties(context)
}
