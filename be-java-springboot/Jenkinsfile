// build params
def odsImageTag = env.ODS_IMAGE_TAG ?: 'latest'
def odsGitRef = env.ODS_GIT_REF ?: 'production'
def projectId = env.PROJECT_ID
def componentId = env.COMPONENT_ID.toLowerCase()
def packageName = env.PACKAGE_NAME
def gitUrlHttp = env.GIT_URL_HTTP
def group = env.GROUP_ID

def credentialsId = "${projectId}-cd-cd-user-with-password"
def quickstarterBasepath = "be-java-springboot"
def springCliVersion = "2.2.4.RELEASE"
def dockerRegistry
def gitHost
// vars from jenkins master
node {
  dockerRegistry = env.DOCKER_REGISTRY
  gitHost =  env.BITBUCKET_HOST.split(":")[0]
}

def conts = containerTemplate(
  name: 'jnlp',
  image: "${dockerRegistry}/cd/jenkins-slave-maven:${odsImageTag}",
  workingDir: '/tmp',
  alwaysPullImage: true,
  args: ''
)

def podLabel = "quickstarter-${quickstarterBasepath}-${projectId}-${componentId}"

podTemplate(
      label: podLabel,
      cloud: 'openshift',
      containers: [conts],
      volumes: [],
      serviceAccount: 'jenkins'
    ) {
        node(podLabel) {
          stage('Checkout quickstarter') {
            checkout scm
          }
          stage('Install spring') {
              sh 'curl -s "https://get.sdkman.io" | bash'
              sh "/bin/bash -lc 'source /home/jenkins/.sdkman/bin/sdkman-init.sh && sdk install springboot ${springCliVersion} && spring --version'"
          }
          stage('Build spring project') {
            // TODO: Check if spring is in the PATH or think about alternative path
            sh "/home/jenkins/.sdkman/candidates/springboot/current/bin/spring init \
                --build=gradle \
                --java-version='1.8' \
                --groupId=${projectId} \
                --artifactId=${componentId} \
                --package-name='${packageName}' \
                --packaging=jar \
                --dependencies='web,jersey,data-jpa,h2,lombok,data-rest,restdocs,security' \
                  ${componentId}"
            withEnv(["COMPONENT=${componentId}","GROUP=${group}","SCRIPT_DIR=${quickstarterBasepath}"]) {
              sh "sh ./${quickstarterBasepath}/postProcessProjectsettings.sh"
            }
          }
          stage('Setup OpenShift resources') {
            sh "sh common/scripts/create-component.sh -qs ${quickstarterBasepath} -p ${projectId} -c ${componentId} --force"
          }
          stage('Create Jenkinsfile') {
            sh "sh common/scripts/renderJenkinsTemplate.sh \
                  --source ${quickstarterBasepath}/Jenkinsfile.template \
                  --target ${componentId}/Jenkinsfile \
                  --url ${gitUrlHttp} \
                  --project-id ${projectId} \
                  --component-id ${componentId}  \
                  --component-type ${quickstarterBasepath} \
                  --ods-image-tag ${odsImageTag} \
                  --ods-git-ref ${odsGitRef}"
          }
          stage('Create sonar-project.properties') {
            sh "sh common/scripts/renderSonarqubeTemplate.sh \
                  --source ${quickstarterBasepath}/sonar-project.properties.template \
                  --target ${componentId}/sonar-project.properties \
                  --project-id ${projectId} \
                  --component-id ${componentId}  \
                  --component-type ${quickstarterBasepath}"
          }
          // FIX: Add stage to copy from files directory, replacing cp -rv ../$SCRIPT_DIR/files/. . in postProcessProjectsettings.sh
          // Check if Jenkinsfile.template etc. are also copied (they should not be!)
          stage('Push to remote') {
            withCredentials([usernamePassword(credentialsId: credentialsId, passwordVariable: 'pass', usernameVariable: 'user')]) {
              writeFile file: "/home/jenkins/.netrc", text: "machine ${gitHost} login ${user} password ${pass}"
            }
            sh "sh common/scripts/git_push.sh --dir ${componentId} --url ${gitUrlHttp}"
          }
      }
}
