def odsNamespace = ''
def odsGitRef = ''
def odsImageTag = ''
def sharedLibraryRef = ''
def agentImageTag = ''

node {
  odsNamespace = env.ODS_NAMESPACE ?: 'ods'
  odsGitRef = env.ODS_GIT_REF ?: 'master'
  odsImageTag = env.ODS_IMAGE_TAG ?: 'latest'
  sharedLibraryRef = env.SHARED_LIBRARY_REF ?: odsImageTag
  agentImageTag = env.AGENT_IMAGE_TAG ?: odsImageTag
}

library("ods-jenkins-shared-library@${sharedLibraryRef}")

odsQuickstarterPipeline(
  imageStreamTag: "${odsNamespace}/jenkins-agent-maven:${agentImageTag}",
) { context ->

  stage('Build spring project') {
    dir(context.targetDir) {
      def springBootVersion = '2.6.1.RELEASE'
      echo "--- create spring boot (v${springBootVersion}) project via spring initializr ---"
      sh "make create-project TARGET_DIR=. SPRING_BOOT_CLI_VERSION=${springBootVersion} PROJECT_ID=${context.projectId} COMPONENT_ID=${context.componentId} PACKAGE_NAME=${context.packageName}"

      echo "--- configure application.properties ---"
      sh "make add-sb-app-properties TARGET_DIR=."

      echo "--- customise build.gradle ---"
	  sh "pwd && ls -lart"
      sh "make customise-build-gradle SOURCE_DIR=../${context.sourceDir} TARGET_DIR=."
      sh "rm Makefile"

      echo "--- end stage Build spring project ---"
    }

  }

  odsQuickstarterStageCopyFiles(context)

  odsQuickstarterStageCreateOpenShiftResources(
    context,
    [directory: 'common/ocp-config/component-environment']
  )

  odsQuickstarterStageRenderJenkinsfile(context)

  odsQuickstarterStageRenderSonarProperties(context)
}
