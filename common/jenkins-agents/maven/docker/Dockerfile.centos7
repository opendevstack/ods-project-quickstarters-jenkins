FROM opendevstackorg/ods-jenkins-agent-base-centos7:latest

LABEL maintainer="Sebastian Titakis <sebastian.titakis@boehringer-ingelheim.com>"

# Labels consumed by Red Hat build service
LABEL com.redhat.component="jenkins-agent-maven-rhel7-docker" \
      name="openshift3/jenkins-agent-maven-rhel7" \
      version="3.6" \
      architecture="x86_64" \
      release="4" \
      io.k8s.display-name="Jenkins agent Maven" \
      io.k8s.description="The jenkins agent maven image has the maven tools on top of the jenkins agent base image." \
      io.openshift.tags="openshift,jenkins,agent,maven"

ARG nexusUrl
ARG nexusUsername
ARG nexusPassword

ENV HOME=/home/jenkins \
    GRADLE_USER_HOME=/home/jenkins/.gradle \
    JAVA_HOME=/usr/lib/jvm/jre

# Container support is now integrated in Java 11, the +UseCGroupMemoryLimitForHeap option has been pruned
ENV JAVA_TOOL_OPTIONS="-XX:+UnlockExperimentalVMOptions -Dsun.zip.disableMemoryMapping=true"

# Copy use java scripts.
COPY use-j*.sh /home/jenkins/

# Install Maven & java 11 and java 17
# Note: use java scripts are executed to test the scripts but also use-j11.sh in called 2nd place to set is as default version
 RUN yum install -y epel-release && yum repolist && yum install -y java-17-openjdk-devel java-17-openjdk-jmods java-11-openjdk-devel java-11-openjdk-jmods && \
    yum clean all -y && rm -rf /var/cache/yum && \
    chmod ug+x /home/jenkins/use-j17.sh && \
    chmod ug+x /home/jenkins/use-j11.sh && \
    /home/jenkins/use-j17.sh && \
    /home/jenkins/use-j11.sh && \
    echo $JAVA_HOME

# Install Maven
ENV MAVEN_VERSION=3.5.4
ENV BASE_URL=https://apache.osuosl.org/maven/maven-3/${MAVEN_VERSION}/binaries
RUN mkdir -p /usr/share/maven /usr/share/maven/ref && \
    curl -fsSL -o /tmp/apache-maven.tar.gz ${BASE_URL}/apache-maven-${MAVEN_VERSION}-bin.tar.gz && \
    tar -xzf /tmp/apache-maven.tar.gz -C /usr/share/maven --strip-components=1 && \
    rm -f /tmp/apache-maven.tar.gz && \
    ln -s /usr/share/maven/bin/mvn /usr/bin/mvn && \
    mkdir -p $HOME/.m2 && \
    mvn --version
ENV MAVEN_HOME=/usr/share/maven
ENV MAVEN_CONFIG=$HOME/.m2

# set java proxy var
COPY set_maven_proxy.sh /tmp/set_maven_proxy.sh
RUN chmod 777 /tmp/set_maven_proxy.sh

ADD ./contrib/settings.xml $HOME/.m2/
RUN mv $HOME/.m2/settings.xml $HOME/.m2/settings.xml.orig && \
 /tmp/set_maven_proxy.sh && \
 xpr=$(cat /tmp/mvn_proxy) && \
 xpr="${xpr//\//\\/}" && \
 xpr="${xpr//|/\\|}" && \
 cat $HOME/.m2/settings.xml.orig | sed -e "s|<proxies>|<proxies>$xpr|g" > $HOME/.m2/settings.xml && \
 sed -i "s/__NEXUS_USER/$nexusUsername/gi" $HOME/.m2/settings.xml && \
 sed -i "s/__NEXUS_PW/$nexusPassword/gi" $HOME/.m2/settings.xml && \
 sed -i "s|__NEXUS_URL|$nexusUrl|gi" $HOME/.m2/settings.xml && \
 cat $HOME/.m2/settings.xml

# install gradle ..
ADD gradlew /tmp/gradlew
RUN mkdir -p /tmp/gradle/wrapper
ADD gradle/* /tmp/gradle/wrapper
RUN ls /tmp/gradle/wrapper

# set java proxy var
COPY set_gradle_proxy.sh /tmp/set_gradle_proxy.sh
RUN chmod 777 /tmp/set_gradle_proxy.sh

RUN mkdir $GRADLE_USER_HOME
RUN /tmp/set_gradle_proxy.sh

RUN /tmp/gradlew -version

#set java proxy via JAVA_OPTS as src
RUN bash -l -c 'echo export JAVA_OPTS="$(/tmp/set_java_proxy.sh && echo $JAVA_OPTS)" >> /etc/bash.bashrc'

RUN chown -R 1001:0 $HOME && \
    chown 1001:0 $HOME/use-j*.sh && \
    chmod -R g+rw $HOME
USER 1001

