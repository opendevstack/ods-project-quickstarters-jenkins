// See https://www.opendevstack.org/ods-documentation/ for usage and customization.

@Library('ods-jenkins-shared-library@@shared_library_ref@') _

node {
  dockerRegistry = env.DOCKER_REGISTRY
  cypressRecordKey = env.CYPRESS_RECORD_KEY
}

odsComponentPipeline(
  podContainers: [
      containerTemplate(
        name: 'jnlp',
        image: "${dockerRegistry}/ods/jenkins-agent-nodejs22:@agent_image_tag@",
        workingDir: '/tmp',
        envVars: [
          envVar(key: 'CYPRESS_RECORD_KEY', value: cypressRecordKey)
        ],
        resourceRequestCpu: '100m',
        resourceLimitCpu: '300m',
        resourceRequestMemory: '1Gi',
        resourceLimitMemory: '2Gi',
        alwaysPullImage: true,
        args: '${computer.jnlpmac} ${computer.name}'
      )
    ],
  branchToEnvironmentMapping: [
    'master': 'dev',
    // 'release/': 'test'
  ]
) { context ->

  // Note: Testing in the production environment is not recommended as it can lead to unintended consequences,
  // including potential downtime, data corruption, or exposure of sensitive information.
  // This block is designed to skip tests in the production environment to avoid these risks.
  // If you choose to enable testing in production, do so at your own risk and take all necessary precautions.
  if (context.environment == 'prod') {
    currentBuild.result = 'SUCCESS'
    echo 'Skipping the entire test build for production environment'
    return
  }

  def targetDirectory = "${context.projectId}/${context.componentId}/${context.gitBranch.replaceAll('/', '-')}/${context.buildNumber}"

  stageTest(context)
  odsComponentStageScanWithSonar(context)

  if (fileExists('cypress/screenshots.zip')) {
    odsComponentStageUploadToNexus(context,
      [
        distributionFile: 'cypress/screenshots.zip',
        repository: 'leva-documentation',
        repositoryType: 'raw',
        targetDirectory: "${targetDirectory}"
      ]
    )
  }

}

def stageTest(def context) {
  stage('Integration Test') {
    // Define your DEV and QA base URLs in a config map in OpenShift; please adapt variable names to your OpenShift config
    // sh "oc project <project-with-configured-secrets>"
    def baseUrls = [
      : // remove this line once you have defined the config map and uncommented the next two lines, it's only here to make the example default case work
      // dev: sh(returnStdout: true, script:"oc get configmaps cypress-config -o jsonpath='{.data.DEV_BASE_URL}'").trim(),
      // test: sh(returnStdout: true, script:"oc get configmaps cypress-config -o jsonpath='{.data.TEST_BASE_URL}'").trim()
    ]

    def baseUrl = baseUrls.get(context.environment ?: 'dev', 'https://www.w3schools.com') // default to W3Schools for demo purposes, replace with your own default

    // Example for loading environment variables for Azure SSO; please adapt variable names to your OpenShift config,
    // making sure to precede the variable names with the environment name in lowercase (e.g., dev_username, dev_password,
    // test_username, test_password, etc.)
    // cypressUser = sh(returnStdout: true, script:"oc get secret e2euser -o jsonpath='{.data.${context.environment}_username}' | base64 -d")
    // cypressPassword = sh(returnStdout: true, script:"oc get secret e2euser -o jsonpath='{.data.${context.environment}_password}' | base64 -d")

    withEnv(["TAGVERSION=${context.tagversion}",
      "NEXUS_HOST=${context.nexusHost}",
      "OPENSHIFT_PROJECT=${context.targetProject}",
      "OPENSHIFT_APP_DOMAIN=${context.getOpenshiftApplicationDomain()}",
      // "CYPRESS_USERNAME=${cypressUser}",
      // "CYPRESS_PASSWORD=${cypressPassword}",
      // "OTP_SECRET=${authenticatorOTPSecret}",
      "COMMIT_INFO_SHA=${context.gitCommit}",
      "BUILD_NUMBER=${context.buildNumber}",
      "CYPRESS_BASE_URL=${baseUrl}",
    ]) {
      sh 'npm install'
      def status = sh(script: 'npm run e2e', returnStatus: true)
      sh 'npm run combine:reports'
      junit(testResults:'build/test-results/*.xml', allowEmptyResults: true)
      stash(name: "installation-test-reports-junit-xml-${context.componentId}-${context.buildNumber}", includes: 'build/test-results/installation-junit.xml', allowEmpty: true)
      stash(name: "integration-test-reports-junit-xml-${context.componentId}-${context.buildNumber}", includes: 'build/test-results/integration-junit.xml', allowEmpty: true)
      stash(name: "acceptance-test-reports-junit-xml-${context.componentId}-${context.buildNumber}", includes: 'build/test-results/acceptance-junit.xml', allowEmpty: true)

      if (fileExists('cypress/videos')) {
        zip zipFile: 'cypress/videos.zip', archive: false, dir: 'cypress/videos'
        stash(name: "acceptance-test-videos-${context.componentId}-${context.buildNumber}", includes: 'cypress/videos.zip', allowEmpty: true)
        archiveArtifacts artifacts: 'cypress/videos.zip', fingerprint: true, daysToKeep: 2, numToKeep: 3
      }

      if (fileExists('cypress/screenshots')) {
        zip zipFile: 'cypress/screenshots.zip', archive: false, dir: 'cypress/screenshots'
        stash(name: "acceptance-test-screenshots-${context.componentId}-${context.buildNumber}", includes: 'cypress/screenshots.zip', allowEmpty: true)
        archiveArtifacts artifacts: 'cypress/screenshots.zip', fingerprint: true, daysToKeep: 2, numToKeep: 3
      }
      
      return status
    }
  }
}
