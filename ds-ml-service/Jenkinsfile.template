// See https://www.opendevstack.org/ods-documentation/ for usage and customization.

@Library('ods-jenkins-shared-library@@ods_git_ref@') _

odsComponentPipeline(
  imageStreamTag: 'cd/jenkins-slave-python:@ods_image_tag@',
  testResults : 'tests-results',
  openshiftBuildTimeout: 25,
  openshiftRolloutTimeout: 10,
  branchToEnvironmentMapping: [
    'master': 'dev',
    // 'release/*': 'test'
  ]
) { context ->
  def trainingServiceName = "${context.componentId}-training-service"
  def predictionServiceName = "${context.componentId}-prediction-service"
  def buildArgs = [
    "nexusHostWithBasicAuth" : context.nexusHostWithBasicAuth,
    "nexusHostWithoutScheme" : context.nexusHost.tokenize('//')[1],
    "serviceType" : ""
  ]

  odsComponentStageScanWithSonar(context)
  stageLint(context)
  stagePrepareBuilds(context)

  buildArgs["serviceType"] = "training"
  odsComponentStageBuildOpenShiftImage(context, [ "componentId" : trainingServiceName, "buildArgs" : buildArgs ])
  def trainingDeployInfo = odsComponentStageRolloutOpenShiftDeployment(context, [ "componentId" : trainingServiceName ])

  stageTrainingUnitTests(context, trainingDeployInfo.podName)
  stageTraining(context, trainingDeployInfo.podName)
  stageTrainingIntegrationTests(context, trainingDeployInfo.podName)

  buildArgs["serviceType"] = "prediction"
  odsComponentStageBuildOpenShiftImage (context, [ "componentId" : predictionServiceName, "buildArgs" : buildArgs ])
  odsComponentStageRolloutOpenShiftDeployment (context, [ "componentId" : predictionServiceName ])
}

def stageLint(def context) {
  stage('Lint') {
    // PEP8
    sh '''
    pycodestyle --show-source --show-pep8 --max-line-length 100 src/model/*
    pycodestyle --statistics -qq --max-line-length 100 src/model/*
    pycodestyle --show-source --show-pep8 --max-line-length 100 src/services/*
    pycodestyle --statistics -qq --max-line-length 100 src/services/*
    pycodestyle --show-source --show-pep8 --max-line-length 100 jenkinsfile_helper.py
    pycodestyle --statistics -qq --max-line-length 100 jenkinsfile_helper.py
    '''
  }
}

def stagePrepareBuilds(def context) {
  stage('Prepare Builds') {
    sh 'sh build.sh'
  }
}

def stageTrainingUnitTests(def context, def trainingPod) {
  stage('Training Unit Tests') {
    print("Running Unit Tests in pod ${trainingPod}")
    sh(returnStdout: true, script: "oc exec ${trainingPod} bash ./run_unittests.sh -n ${context.targetProject}")
  }
}

def stageTraining(def context, def trainingPod) {
  stage('Train Model') {
    sh(returnStdout: true, script:"pip install -i ${context.nexusHostWithBasicAuth}/repository/pypi-all/simple --trusted-host ${context.nexusHost.tokenize('//')[1]}  requests --user")

    def trainingRoute = "http://localhost:8080"
    def trainingPassword = sh(returnStdout: true, script:"oc get secret ${context.componentId}-training-secret -o yaml -n ${context.targetProject} | grep password: | cut -d':' -f2 ").trim()
    def trainingUsername = sh(returnStdout: true, script:"oc get secret ${context.componentId}-training-secret -o yaml -n ${context.targetProject} | grep username: | cut -d':' -f2 ").trim()

    trainingPassword = sh(returnStdout: true, script:"echo \"${trainingPassword}\" | base64 --decode").trim()
    trainingUsername = sh(returnStdout: true, script:"echo \"${trainingUsername}\" | base64 --decode").trim()

    sh "oc port-forward ${trainingPod} 8080 -n ${context.targetProject} &"
    // wait for port-forward to map the ports or for 10s
    sh "timeout 10s bash -c 'until ! curl -v --silent http://localhost:8080 2>&1 | grep -m 1 \"Connection refused\"; do sleep 1 ; done'; echo -e \\\\a"
    // trigger model training
    sh "python3 jenkinsfile_helper.py --training-service ${trainingRoute} --username \"${trainingUsername}\" --password \"${trainingPassword}\""
    // get the model for the prediction build
    sh "curl -Lv --user \"${trainingUsername}\":\"${trainingPassword}\" \"${trainingRoute}\"/getmodel -o docker/dist/\"${context.getGitCommit()}\""
  }
}

def stageTrainingIntegrationTests(def context, def trainingPod) {
  stage('Training Integration Tests') {
    print("Running Training Integration Tests in pod ${trainingPod}")
    sh(returnStdout: true, script: "oc -n ${context.targetProject} exec ${trainingPod} bash ./run_integration_tests.sh")
    sh(returnStdout: true, script: "oc -n ${context.targetProject} exec ${trainingPod} cat nosetests.xml > testresults.xml")
    sh "mkdir -p tests-results && mv testresults.xml tests-results/"
  }
}
