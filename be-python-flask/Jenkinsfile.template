/* generated jenkins file used for building and deploying @component_id@ in projects @project_id@ */
def final projectId = '@project_id@'
def final componentId = '@component_id@'
def final credentialsId = "${projectId}-cd-cd-user-with-password"
def sharedLibraryRepository
def dockerRegistry
node {
  sharedLibraryRepository = env.SHARED_LIBRARY_REPOSITORY
  dockerRegistry = env.DOCKER_REGISTRY
}

library identifier: 'ods-library@@ods_git_ref@', retriever: modernSCM(
  [$class: 'GitSCMSource',
   remote: sharedLibraryRepository,
   credentialsId: credentialsId])

// See https://www.opendevstack.org/ods-documentation/ods-jenkins-shared-library/latest/index.html for usage and customization.
odsPipeline(
  image: "${dockerRegistry}/cd/jenkins-slave-python:@ods_image_tag@",
  projectId: projectId,
  componentId: componentId,
  branchToEnvironmentMapping: [
    'master': 'dev',
    // 'release/*': 'test'
  ]
) { context ->
  stageTestSuite(context, context.nexusHostWithBasicAuth, context.nexusHost.tokenize('//')[1])
  stageScanForSonarqube(context)
  stageBuild(context)
  stageStartOpenshiftBuild(context, [nexusHostWithBasicAuth: context.nexusHostWithBasicAuth, nexusHostWithoutScheme: context.nexusHost.tokenize('//')[1]])
  stageDeployToOpenshift(context)
}

def stageTestSuite(def context, def nexusHostWithBasicAuth, def nexusHostWithoutScheme) {
  String testLocation = 'build/test-results/test'
  String coverageLocation = 'build/test-results/coverage'

  stage('Prepare Test Suite') {
    sh """
      virtualenv testsuite
      . ./testsuite/bin/activate
      pip install -i ${nexusHostWithBasicAuth}/repository/pypi-all/simple --trusted-host ${nexusHostWithoutScheme} -r tests/requirements.txt
      mkdir -p ${testLocation}
      mkdir -p ${coverageLocation}
    """
  }

  stage('Lint') {
    sh """
      . ./testsuite/bin/activate
      mypy src
      flake8 --max-line-length=120 src
    """
  }

  stage('Test') {
    def status = sh(
      script: """
        . ./testsuite/bin/activate
        cd src
        python -m pytest --junitxml=tests.xml --cov-report term-missing --cov-report xml --cov=. ../tests/
        mv tests.xml ../${testLocation}
        mv coverage.xml ../${coverageLocation}
        mv .coverage ../${coverageLocation}
      """,
      returnStatus: true
    )

    junit "${testLocation}/tests.xml"

    if (status != 0) {
      error "Unit tests failed!"
    }
  }
}

def stageBuild(def context) {
  stage('Build') {
    sh """
      mkdir docker/dist
      cp -rv src docker/dist
    """
  }
}
